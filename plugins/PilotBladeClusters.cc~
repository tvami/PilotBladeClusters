#include "PilotBladeClusters.h"

using namespace std;
using namespace edm;
using namespace reco;

// ------------------------- Constructor & Destructor  ------------------------
PilotBladeClusters::PilotBladeClusters(edm::ParameterSet const& iConfig) : iConfig_(iConfig) {
  eventTree_=NULL;
  clustTree_=NULL;
  outfile_=NULL;
  
  isNewLS_ = false; 
  usePixelCPE_=false;
}

PilotBladeClusters::~PilotBladeClusters() { }

// ------------------------------ beginJob ------------------------------------
void PilotBladeClusters::beginJob() {
  
  std::string fileName="test.root";
  if (iConfig_.exists("fileName")) {  
    fileName=iConfig_.getParameter<std::string>("fileName");
  }
  
  if (iConfig_.exists("usePixelCPE")) {
    usePixelCPE_=iConfig_.getParameter<bool>("usePixelCPE");
    std::cout<<"NON-DEFAULT PARAMETER: usePixelCPE= "<<usePixelCPE_<<std::endl;
  }
  
  outfile_ = new TFile(fileName.c_str(), "RECREATE");
  std::cout<<"Output file created: "<<outfile_->GetName()<<std::endl;
  
  EventData         evt_;
  Cluster           clust;
  
  eventTree_ = new TTree("eventTree", "The event");
  eventTree_->Branch("event",     &evt_,            evt_.list.data());
  
  clustTree_ = new TTree("clustTree", "Pixel clusters in the event");
  clustTree_->Branch("event",     &evt_,            evt_.list.data());
  clustTree_->Branch("clust",     &clust,           clust.list.data());
  //clustTree_->Branch("clust_pix", &clust.pix,       "pix[size][2]/F");
  clustTree_->Branch("module",    &clust.mod,       clust.mod.list.data());
  clustTree_->Branch("module_on", &clust.mod_on,    clust.mod_on.list.data());
}

// ------------------------------ endJob --------------------------------------
void PilotBladeClusters::endJob() {
  outfile_->Write();
  outfile_->Close();
  delete outfile_;
}

// ------------------------------ beginRun ------------------------------------
void PilotBladeClusters::beginRun(edm::Run const& iRun, edm::EventSetup const& iSetup){
  evt_.init();
  evt_.run = iRun.run();
  
  // ConditionsInRunBlock for fill number
  edm::Handle<edm::ConditionsInRunBlock> condInRunBlock;
  iRun.getByLabel("conditionsInEdm", condInRunBlock);
  if (condInRunBlock.isValid()) {
    evt_.fill = condInRunBlock->lhcFillNumber;
  } else if (evt_.run==1) {
    evt_.fill = 0;
  } else {
    std::cout<<"No condInRunBlock info is available" << std::endl;
    return;
  }
  std::cout<<"Begin Run: "<<evt_.run<<" in Fill: "<<evt_.fill<<std::endl;
}

// ------------------------------ endRun -------------------------------------
void PilotBladeClusters::endRun(edm::Run const& iRun, edm::EventSetup const& iSetup){
  // ConditionsInRunBlock
  edm::Handle<edm::ConditionsInRunBlock> condInRunBlock;
  iRun.getByLabel("conditionsInEdm", condInRunBlock);
  if (!condInRunBlock.isValid()) {
    std::cout<<" CondInRunBlock info is NOT available" << std::endl;
  } else {
    evt_.fill = condInRunBlock->lhcFillNumber;
    evt_.run = iRun.run();
    std::cout << " End Run: " << evt_.run << " in Fill: " << evt_.fill << std::endl;
  }
}

// ------------------------ beginLuminosityBlock ------------------------------
void PilotBladeClusters::beginLuminosityBlock(edm::LuminosityBlock const& iLumi, edm::EventSetup const& iSetup){
  isNewLS_ = true;
}

// -------------------------- endLuminosityBlock ------------------------------
void PilotBladeClusters::endLuminosityBlock(edm::LuminosityBlock const& iLumi, edm::EventSetup const& iSetup){
  
  edm::Handle<LumiSummary> lumi;
  iLumi.getByLabel("lumiProducer", lumi);
  if (!lumi.isValid()) {
    std::cout<<" LumiSummary info is NOT available " << std::endl;
    evt_.init();
  } else {
    evt_.init(); // temporal values deleted, now we fill it for real
    evt_.intlumi=lumi->intgRecLumi();
    evt_.instlumi=lumi->avgInsDelLumi();
  }
  
  // ConditionsInLumiBlock
  edm::Handle<edm::ConditionsInLumiBlock> cond;
  iLumi.getByLabel("conditionsInEdm", cond);
  if (!cond.isValid()) {
    std::cout<<"ConditionsInLumiBlock info is NOT available" << std::endl;
    return;
  }
  
  evt_.run=iLumi.run();
  evt_.ls=iLumi.luminosityBlock();
  
  std::cout << "New lumi block: Run " << evt_.run << " LS = " << evt_.ls;
  std::cout << " inst lumi " << evt_.instlumi 
	    << " int lumi " << evt_.intlumi<<std::endl;
  
  eventTree_->Fill();
  evt_.init();
}

// -------------------------------- analyze -----------------------------------
void PilotBladeClusters::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup) {
  bool DEBUG = false;
  if (DEBUG) std::cout << "Processing the event " << std::endl;
  //beginLuminosityBlock
  if (isNewLS_== true) {
    evt_.run = iEvent.id().run();
    std::cout << "Run in the iEvent.id().run(): " << evt_.run << std::endl;
    evt_.ls=iEvent.luminosityBlock();
    isNewLS_=false;
  } else {
    assert(evt_.run == int(iEvent.id().run()));
    assert(evt_.ls == int(iEvent.luminosityBlock()));
  }
  
  init_all();
  
  // Read event info
  evt_.run=iEvent.id().run();
  evt_.evt=iEvent.id().event();
  evt_.ls=iEvent.luminosityBlock(); 
    
  Surface::GlobalPoint origin = Surface::GlobalPoint(0,0,0);
  //------------------------------------------------------------------------------

  analyzeClusters(iEvent, iSetup, "siPixelClusters");
  analyzeClusters(iEvent, iSetup, "PBClusters");

  // ----------------------- start of filling the clusTree -----------------------
  eventTree_->SetBranchAddress("event", &evt_);
  eventTree_->Fill();
  
  Cluster clu;
  clustTree_->SetBranchAddress("event", &evt_);
  clustTree_->SetBranchAddress("clust", &clu);
  clustTree_->SetBranchAddress("module", &clu.mod);
  //clustTree_->SetBranchAddress("clust_pix", &clu.pix);
  clustTree_->SetBranchAddress("module_on", &clu.mod_on);
  
  for (size_t i=0; i<clusts_.size(); i++) {
    clu = clusts_[i];
    clustTree_->Fill();
  }
// ----------------------- end of filling the clusTree ------------------------
}//end of analyzer

// ------------------------------ other functions -----------------------------
// ------------------------------ analyzeClusters -----------------------------

void PilotBladeClusters::analyzeClusters(const edm::Event& iEvent, 
					 const edm::EventSetup& iSetup,  
					 std::string clusterColl) {
  bool DEBUG = true;
  edm::Handle<edmNew::DetSetVector<SiPixelCluster> > clusterCollectionHandle;
  iEvent.getByLabel(clusterColl, clusterCollectionHandle);
  
  if (clusterCollectionHandle.isValid()) {
    const edmNew::DetSetVector<SiPixelCluster>& clusterCollection = *clusterCollectionHandle;
    edmNew::DetSetVector<SiPixelCluster>::const_iterator itClusterSet =  clusterCollection.begin();

    for (; clusterCollectionHandle.isValid() && itClusterSet != clusterCollection.end();
	  itClusterSet++) {
	    DetId detId(itClusterSet->id());
      unsigned int subDetId=detId.subdetId();
	 
	    if (DEBUG) std::cout << "Looping on the cluster sets ";
      // Take only pixel clusters
      if (subDetId!=PixelSubdetector::PixelEndcap) {
        std::cout << "Not a FPIX cluster" << std::endl; // should not happen
	      continue;
      }
      edmNew::DetSet<SiPixelCluster>::const_iterator itCluster=itClusterSet->begin();
      for(; itCluster!=itClusterSet->end(); ++itCluster) {
        if (DEBUG) std::cout << "Looping on the clusters in the set " << std::endl;
                
        edm::ESHandle<TrackerGeometry> tracker;
        iSetup.get<TrackerDigiGeometryRecord>().get(tracker);
        
        const Surface* surface = &(tracker->idToDet(detId)->surface());
        
        LocalPoint lp(itCluster->x(), itCluster->y(), 0.);
        LocalPoint lp1(1.0,0.0,0.0);
        LocalPoint lp2(0.0,1.0,0.0);
        LocalPoint lp3(1.0,0.0,1.0);
        GlobalPoint gp = surface->toGlobal(lp);
        GlobalPoint gp1 = surface->toGlobal(lp1);
        GlobalPoint gp2 = surface->toGlobal(lp2);
        GlobalPoint gp3 = surface->toGlobal(lp3);
        std::cout << "GlobalPoint" << gp << std::endl;
        std::cout << "GlobalPoint1" << gp1 << std::endl;
        std::cout << "GlobalPoint2" << gp2 << std::endl;
        std::cout << "GlobalPoint3" << gp3 << std::endl;
        
        Cluster clust;
        clust.x=itCluster->x();
        clust.y=itCluster->y();
        clust.glx = gp.x();
        clust.gly = gp.y();
        clust.glz = gp.z();
        clust.sizeX=itCluster->sizeX();
        clust.sizeY=itCluster->sizeY();
        clust.i=itCluster-itClusterSet->begin();
        clust.size=itCluster->size();
        clust.charge=itCluster->charge()/1000.0;

        for (int i=0; i<itCluster->size() && i<1000; i++) {
          clust.adc[i]=float(itCluster->pixelADC()[i])/1000.0;
          clust.pix[i][0]=((itCluster->pixels())[i]).x;
          clust.pix[i][1]=((itCluster->pixels())[i]).y;
        }

        clust.mod    = getModuleData(detId.rawId());
        clust.mod_on = getModuleData(detId.rawId(), "online");

        if (DEBUG) std::cout<<"\t#"<<clust.i<<" charge: "<<clust.charge<<" size: "<<clust.size<<std::endl;

	clusts_.push_back(clust);
      }
    } // loop on cluster sets
  } else {
    std::cout<< "The clusterCollectionHandle is invalid" << std::endl;
  }
}


// ------------------------------- getModuleData ------------------------------
PilotBladeClusters::ModuleData PilotBladeClusters::getModuleData
(uint32_t rawId, std::string scheme) {

  ModuleData offline;
  ModuleData online;

  offline.rawid = online.rawid = rawId;
  int subDetId = DetId(offline.rawid).subdetId();
  // BPIX detector
  if (subDetId == PixelSubdetector::PixelBarrel) {
    PXBDetId pxbid=PXBDetId(offline.rawid);
    offline.det=online.det=0;
    offline.layer=online.layer=pxbid.layer();
    offline.ladder=pxbid.ladder();
    offline.module=pxbid.module();
    offline.half=0;
  if (offline.layer==1) {
    if (offline.ladder==5||offline.ladder==6||offline.ladder==15||offline.ladder==16) {
      offline.half=1;
    }
    offline.outer=offline.ladder%2;
  } else if (offline.layer==2) {
    if (offline.ladder==8||offline.ladder==9||offline.ladder==24||offline.ladder==25) {
    offline.half=1;
  }
  offline.outer=1-offline.ladder%2;
  } else if (offline.layer==3) {
    if (offline.ladder==11||offline.ladder==12||offline.ladder==33||offline.ladder==34) {
      offline.half=1;
    }
    offline.outer=offline.ladder%2;
  }
 
  if (scheme.find("on")==std::string::npos) return offline;
 
  if (offline.layer==1) {
    if (offline.ladder<=5 && offline.ladder>=1)online.ladder = 6-offline.ladder;
    else if (offline.ladder<=15 && offline.ladder>=6)online.ladder = 5-offline.ladder;
    else if (offline.ladder<=20 && offline.ladder>=16) online.ladder = 26-offline.ladder;
  } else if (offline.layer==2) {
    if (offline.ladder<=8 && offline.ladder>=1)online.ladder = 9-offline.ladder;
    else if (offline.ladder<=24 && offline.ladder>=9)online.ladder = 8-offline.ladder;
    else if (offline.ladder<=32 && offline.ladder>=25) online.ladder = 41-offline.ladder;
  } if (offline.layer==3) {
    if (offline.ladder<=11 && offline.ladder>=1) online.ladder = 12-offline.ladder;
    else if (offline.ladder<=33 && offline.ladder>=12) online.ladder = 11-offline.ladder;
    else if (offline.ladder<=44 && offline.ladder>=34) online.ladder = 56-offline.ladder;
  }
 
  if (offline.module>=1 && offline.module<=4)online.module = offline.module-5;
  else if (offline.module>=4 && offline.module<=8)online.module = offline.module-4;
 
  online.shl=online.shell_num();
  online.half=offline.half;
  online.outer=offline.outer;
 
  std::map<std::string, std::string>::const_iterator it;
  std::ostringstream sector;
  sector << "BPix_" << online.shell() << "_SEC";
 
  return online;
  }

  // FPIX detector
  if (subDetId == PixelSubdetector::PixelEndcap) {
    PXFDetId pxfid = PXFDetId(offline.rawid);
    if (pxfid.disk()!= 3) {
      offline.det = online.det=1;
      offline.side= online.side = pxfid.side();
      offline.disk= pxfid.disk();
      offline.blade= pxfid.blade();
      offline.panel= online.panel= pxfid.panel();
      offline.module = online.module = pxfid.module(); // not checked

      if (scheme.find("on")==std::string::npos) return offline;

      online.disk=offline.disk*(offline.side*2-3);

      if (offline.blade<=6 && offline.blade>=1)online.blade = 7-offline.blade;
      else if (offline.blade<=18 && offline.blade>=7)online.blade = 6-offline.blade;
      else if (offline.blade<=24 && offline.blade>=19)online.blade = 31-offline.blade;

      online.shl=online.shell_num();

      std::map<std::string, std::string>::const_iterator it;
      std::ostringstream disk;
      disk << "FPix_" << online.shell() << "_D" << abs(online.disk);
      std::ostringstream panel;
      panel << disk.str() << "_BLD" << abs(online.blade) << "_PNL" << online.panel;

      return online;
    } 
   // Pilot Blade
    else {
    offline.det= online.det= 1;
    offline.disk = pxfid.disk();
    offline.side = online.side = pxfid.side();
    online.disk = offline.disk*(offline.side*2-3);
    offline.blade= pxfid.blade();
    offline.panel= online.panel= pxfid.panel();
    offline.module = online.module = pxfid.module();

    if (scheme.find("on")==std::string::npos) return offline;
      return online;
    }
  }
  return offline;
}
// ---------------------------- end of getModuleData --------------------------

// Other useful things
/*
  if (DetID == 344130820 || DetID == 344131844 || DetID == 344132868 
  || DetID == 344133892 || DetID == 344131076 || DetID == 344132100 
  || DetID == 344133124 || DetID == 344134148 ) {
*/
DEFINE_FWK_MODULE(PilotBladeClusters);

