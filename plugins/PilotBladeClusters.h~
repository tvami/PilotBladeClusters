#ifndef PilotBladeClusters_h
#define PilotBladeClusters_h

/** \class PilotBladeClusters
 * Vami Tamas Almos (Wigner RCP)
 * 2015. 08. 14.
 ************************************************************/
// ----------------------------------------------------------------------------------------
// CMSSW Version:
#define CMSSW_VER 75

#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "Geometry/TrackerGeometryBuilder/interface/PixelGeomDetUnit.h"
#include "SimDataFormats/TrackingHit/interface/PSimHit.h"
#include "SimDataFormats/Track/interface/SimTrack.h"
#include "SimDataFormats/Track/interface/SimTrackContainer.h"
#include "DataFormats/TrackerRecHit2D/interface/SiPixelRecHitCollection.h"
//#include "TrackingTools/PatternTools/interface/TrajectoryFitter.h"
#include "TrackingTools/TrackFitters/interface/TrajectoryFitter.h"
#include "TrackingTools/TrackFitters/interface/TrajectoryStateCombiner.h"
#include "TrackingTools/TransientTrack/interface/TransientTrack.h"
#include "Alignment/OfflineValidation/interface/TrackerValidationVariables.h"
#include "TrackingTools/TrackAssociator/interface/TrackAssociatorParameters.h"
#include "TrackingTools/TrackAssociator/interface/TrackDetectorAssociator.h"
#include "FWCore/Framework/interface/LuminosityBlock.h"
#include "PhysicsTools/Utilities/interface/LumiReWeighting.h"
#include "TObject.h"
#include "TH1D.h"
#include "TFile.h"

#include "DataFormats/MuonReco/interface/MuonFwd.h"
#include "DataFormats/MuonReco/interface/Muon.h"
#include "DataFormats/MuonReco/interface/MuonTime.h"
#include "DataFormats/MuonDetId/interface/DTChamberId.h"
#include "DataFormats/MuonDetId/interface/MuonSubdetId.h"
#include "DataFormats/TrackerRecHit2D/interface/SiPixelRecHitCollection.h"
#include "RecoMuon/GlobalTrackingTools/interface/GlobalMuonTrackMatcher.h"
#include "DataFormats/Math/interface/deltaPhi.h"
#include "DataFormats/Math/interface/deltaR.h"
#include "DataFormats/SiPixelRawData/interface/SiPixelRawDataError.h"
#include "DataFormats/SiPixelDetId/interface/PXBDetId.h"
#include "DataFormats/SiPixelDetId/interface/PXFDetId.h"
#include "DataFormats/SiStripDetId/interface/TIBDetId.h"
#include "DataFormats/SiStripDetId/interface/TIDDetId.h"
#include "DataFormats/SiStripDetId/interface/TOBDetId.h"
#include "DataFormats/SiStripDetId/interface/TECDetId.h"
#include "DataFormats/EcalDetId/interface/EBDetId.h"
#include "DataFormats/EcalDetId/interface/EEDetId.h"
#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/BeamSpot/interface/BeamSpot.h"
#include "DQM/SiStripCommon/interface/SiStripFolderOrganizer.h"
#include "TrackingTools/PatternTools/interface/Trajectory.h"
#include "TrackingTools/TrajectoryState/interface/TrajectoryStateTransform.h"
#include "TrackingTools/TransientTrack/interface/TransientTrack.h"
#include "TrackingTools/PatternTools/interface/TrajTrackAssociation.h"
#include "RecoLocalTracker/ClusterParameterEstimator/interface/PixelClusterParameterEstimator.h"

//#include "Geometry/TrackerTopology/interface/RectangularPixelTopology.h"
#include "Geometry/TrackerGeometryBuilder/interface/RectangularPixelTopology.h"
#include <Geometry/TrackerGeometryBuilder/interface/TrackerGeometry.h>
#include "TrackingTools/TrackAssociator/interface/TrackDetectorAssociator.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "PhysicsTools/FWLite/interface/TFileService.h"
#include "MagneticField/Records/interface/IdealMagneticFieldRecord.h"
#include "MagneticField/Engine/interface/MagneticField.h"
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"
#include "RecoTracker/MeasurementDet/interface/MeasurementTracker.h"
#include "RecoTracker/Record/interface/CkfComponentsRecord.h"
#include "TrackingTools/KalmanUpdators/interface/Chi2MeasurementEstimator.h"
#include "TrackingTools/DetLayers/interface/DetLayer.h"
#include "RecoTracker/TkDetLayers/interface/GeometricSearchTracker.h"
#include "TrackingTools/MeasurementDet/interface/LayerMeasurements.h"
#include "DataFormats/Luminosity/interface/LumiSummary.h"
#include "DataFormats/Common/interface/ConditionsInEdm.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include <DataFormats/Scalers/interface/Level1TriggerScalers.h>
#include <DataFormats/Common/interface/EDCollection.h>
#include "FWCore/Utilities/interface/RandomNumberGenerator.h"
#include "CLHEP/Random/RandPoissonQ.h"
// SimDataFormats
#include "SimDataFormats/TrackingHit/interface/PSimHitContainer.h"
#include "SimTracker/TrackerHitAssociation/interface/TrackerHitAssociator.h"
#include "SimDataFormats/PileupSummaryInfo/interface/PileupSummaryInfo.h"

// For ROOT
#include <TROOT.h>
#include <TTree.h>
#include <TH1F.h>
#include <TH2F.h>
#include <TStopwatch.h>

// STD
#include <memory>
#include <string>
#include <iostream>
#include <vector>

// For Resolution
#include "Geometry/CommonTopologies/interface/Topology.h"
#include "TrackingTools/Records/interface/TransientTrackRecord.h"
#include "TrackingTools/Records/interface/TransientRecHitRecord.h"
#include "TrackingTools/TransientTrack/interface/TransientTrackBuilder.h"
#include "TrackingTools/TransientTrackingRecHit/interface/TransientTrackingRecHit.h"
#include "TrackingTools/TransientTrackingRecHit/interface/TransientTrackingRecHitBuilder.h"
#include "RecoTracker/TransientTrackingRecHit/interface/TkTransientTrackingRecHitBuilder.h"


#define NOVAL_I -9999
#define NOVAL_F -9999.0

using namespace reco;
class TTree;
class TFile;
class RectangularPixelTopology;
class TObject;

class PilotBladeClusters : public edm::EDAnalyzer
{
 public:
  explicit PilotBladeClusters(const edm::ParameterSet&);
  virtual ~PilotBladeClusters();
  virtual void beginJob();
  virtual void endJob();
  virtual void beginRun(edm::Run const&, edm::EventSetup const&);
  virtual void endRun(edm::Run const&, edm::EventSetup const&);
  virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&);
  virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&);
  virtual void analyze(const edm::Event&, const edm::EventSetup&);

 private:
  edm::ParameterSet iConfig_;
  edm::ESHandle<TrackerGeometry> tkGeom_;
  edm::ESHandle<MagneticField> magneticField_;

  TTree* eventTree_;
  TTree* clustTree_;
  TFile* outfile_;

  bool usePixelCPE_;
  bool isNewLS_;

 public:
  // Event info
    class EventData {
    public:
    int fill;
    int run;
    int ls;
    int evt;
    float intlumi;
    float instlumi;
    int ntracks;
    std::string list;

    EventData() { init(); };
    void init() {
      fill=NOVAL_I;
      run=NOVAL_I;
      ls=NOVAL_I;
      evt=NOVAL_I;
      intlumi=NOVAL_F;
      instlumi=NOVAL_F;
      ntracks=NOVAL_I;
      
      list="fill/I:run/I:ls/I:evt/I:intlumi/F:instlumi/F:ntracks/I";
    }
  } evt_;

  // Cluster info
  class ClustData {
   public:
    // Paired branches (SPLIT mode)
    float x;
    float y;
    int sizeX;
    int sizeY;
    // From here Split mode (if SPLIT defined)
    int i; // serial num of cluster in the given module
    int size;
    float charge;
    // adc must be the last variable of the branch
    float adc[1000];
    float pix[1000][2];

    std::string list;

    ClustData() { init(); }
    void init() {
      x=NOVAL_F;
      y=NOVAL_F;
      sizeX=NOVAL_I;
      sizeY=NOVAL_I;
      i=NOVAL_I;
      size=0;
      charge=NOVAL_F;
      for (size_t i=0; i<1000; i++) {
        adc[i]=pix[i][0]=pix[i][1]=NOVAL_F;
      }
      
      list="x/F:y/F:sizeX/I:sizeY/I:i/I:size/I:charge/F:adc[size]";
    }
  };
  
   // Module info
  class ModuleData {
   public:
    int det;
    int layer;
    int ladder;
    int half;
    int module;
    int disk;
    int blade;
    int panel;

    int side;
    int shl;

    int outer;

    unsigned int rawid;

    std::string list;
    
    ModuleData() { init(); }
    void init() {
      det=NOVAL_I;
      layer=NOVAL_I;
      ladder=NOVAL_I;
      half=NOVAL_I;
      module=NOVAL_I;
      disk=NOVAL_I;
      blade=NOVAL_I;
      panel=NOVAL_I;
      side=NOVAL_I;
      shl=NOVAL_I;
      outer=NOVAL_I;
      rawid=abs(NOVAL_I);
      
      list="det/I:layer/I:ladder/I:half/I:module/I:disk/I:blade/I:panel/I:"
      "side/I:shl/I:outer/I:rawid/i";
	
	  }

    std::string shell() {
      std::ostringstream ss;
      if (det==0) {
	ss << "B" << ((module>0) ? "p" : "m") << ((ladder>0) ? "I" : "O");
      } else if (det==1) {
	ss << "B" << ((disk>0) ? "p" : "m") << ((blade>0) ? "I" : "O");
      }
      return ss.str();
    }

    int shell_num() {
      if (det==0)      return ((module>0) ? 0 : 2) + ((ladder>0) ? 0 : 1);
      else if (det==1) return ((disk>0) ? 0 : 2) + ((blade>0) ? 0 : 1);
      return -1;
    }
  };


  class Cluster : public ClustData {
    public:

    ModuleData mod; // offline module number
    ModuleData mod_on; // online module number

    Cluster() { mod.init(); mod_on.init();}
    void init() {
      ClustData::init();
      mod.init();
      mod_on.init();
    }    
  };

  std::vector<Cluster> clusts_;

  
  void init_all() {
    evt_.init();
    clusts_.clear();
  }

  ModuleData getModuleData(uint32_t rawId, std::string scheme="offline");
  
  void analyzeClusters(const edm::Event&, const edm::EventSetup&, std::string, Cluster);

  int get_RocID_from_cluster_coords(const float&, const float&, const ModuleData&);

  int get_RocID_from_local_coords(const float&, const float&, const ModuleData&);
				
  void findClosestClusters(const edm::Event&, const edm::EventSetup&, uint32_t, 
			 float, float, float*, float*, std::string, edmNew::DetSet<SiPixelCluster>::const_iterator&);
			    

};

#endif
